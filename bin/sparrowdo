#!raku

use Sparrowdo;

use Sparrowdo::Ssh;

use Sparrowdo::Docker;

use Sparrowdo::Localhost;

use Sparrowdo::Utils;

use Sparrow6::DSL;

sub MAIN (

  Str  :$host = "127.0.0.1", 
  Str  :$sparrowfile, 
  Str  :$tags, 
  Str  :$repo = "http://sparrowhub.io/repo/", 
  Str  :$ssh_user, 
  Int  :$ssh_port = 22, 
  Str  :$ssh_private_key, 
  Bool :$verbose = False,
  Bool :$dry_run = False,
  Bool :$debug   = False,
  Bool :$bootstrap = False, 
  Bool :$no_sudo = False,
  Bool :$localhost = False,
  Str  :$docker,
  Str  :$conf,
  Str  :$prefix,
  Str  :$sync,
  Str  :$watch, 
  Str  :$desc,
  Int  :$workers = 3, 
  Bool :$no_index_update  = False,
  Bool :$with_sparky  = False,
)

{

  my @jobs; # queued jobs

  my $spf = $sparrowfile || 'sparrowfile'; # Sparrowfile to run

  if $conf && ! ( $conf.IO ~~ :e ) {
    die "configuration file $conf does not exist";
  }

  my $path-to-config = $conf || "config.pl6";

  generate-sparrowdo-harness %(
    config => $path-to-config,
    sparrowfile => $spf,
    ssh-user => $ssh_user,
    sync => $sync,
    verbose => $verbose,
    sudo => ! $no_sudo,
    debug => $debug,
    repo => $repo,
    prefix => $prefix,
    index-update => ! $no_index_update,
    tags => $tags,
    type => $docker ?? "docker" !! "default",
    localhost => $localhost,
  );

  if ($docker) {

    prepare-docker-host(
      $docker,
      %( 
        verbose => $verbose,
        prefix  => $prefix,
      )
    );

    if $bootstrap {
      bootstrap-docker-host(
        $docker,
        %( 
            verbose => $verbose, 
            prefix  => $prefix 
         )
      );
      if ! $sparrowfile && ! $spf.IO.e  { 
        # don't try to run sparrowfile if in bootstrap mode
        # and if sparrowfile is not passed and 
        # default sparrowfile does not exist
        say "Congratulations!\nYour system is ready to be configured automatically using Sparrowdo!";
        exit 0;
      }
    }

    die "sparrowfile $spf does not exit" unless $spf.IO ~~ :e;

    run-tasks-docker-host(
      $docker, 
      %( 
        verbose => $verbose, 
        prefix  => $prefix 
      )
    );

  } elsif $localhost && ! $with_sparky {  

    if $bootstrap {
      bootstrap-localhost %( 
        verbose => $verbose 
      );
      if ! $sparrowfile && ! $spf.IO.e  { 
        # don't don anything if in bootstrap mode
        # and if a sparrowfile is not set via cli 
        # and a default sparrowfile does not exist
        say "Congratulations!\nYour system is ready to be configured automatically using Sparrowdo!";
        exit 0;
      }
    }

    die "sparrowfile $spf does not exit" unless $spf.IO ~~ :e;

    run-tasks-localhost %( 
      verbose => $verbose, 
    );

  } elsif $host.IO ~~ :f or $with_sparky {  

    prepare-sparrowdo-files %( 
      verbose => $verbose
    );

    my @hosts;

    if $with_sparky {
      my $hst = $localhost ??  "localhost" !! $host;
      @hosts.push: $hst; 
    } else {
      @hosts = EVALFILE($host);
    }

    my %tags = $tags ?? parse-tags($tags) !! %(); 

    say "cli tags: {%tags.perl}" if $verbose;

    my @required-tags = %tags.keys.grep({ %tags{$_}.isa(Bool) });

    say "required tags: {@required-tags.perl}" if $verbose;

    for @hosts -> $i {

      my $h;

      my $host-tags;

      if $i.isa("Hash") {
        $h = $i<host>;
        $host-tags = $i<tags> if $i<tags>;
      } else {
        $h = $i;
      } 

     my %host-tags = %();

     if $host-tags && $host-tags.isa(Str) {
       %host-tags = parse-tags($host-tags)
     } elsif $host-tags.isa(Hash) {
       %host-tags = $host-tags;
     } elsif $host-tags.isa(List) {
       %host-tags = $host-tags.map({ ($_ => True) });
     }

     # if --tags is passed
     # filter hosts by tags

     my $tag-pass = False;
 
     if @required-tags {

        $tag-pass = False;

        for @required-tags -> $tg {
          if %host-tags{$tg}:exists {
            $tag-pass = True;
          } else {
            $tag-pass = False;
            last;
          }
        }

      } else {

        $tag-pass = True

      }

      say "host tags: ", %host-tags.perl if $verbose;
      
      if $tag-pass {
        say "ALLOW host {$h} by tags creteria" if $verbose;
      } else {
        say "SKIP host {$h} by tags creteria" if $verbose;
        next;
      }

      next if $dry_run;

      my $wid = "worker_%.2d".sprintf((^$workers).pick(1).join("")+1);

      my $project = $i<project>:exists ?? $i<project> !! $wid;

      my $sparky-project-dir = %*ENV<SPARKY_ROOT> ?? "{%*ENV<SPARKY_ROOT>}/{$project}" !! "{%*ENV<HOME>}/.sparky/projects/{$project}";

      mkdir "{$sparky-project-dir}/.triggers" unless "{$sparky-project-dir}/.triggers".IO ~~ :d;
  
      unless "{$sparky-project-dir}/sparrowfile".IO ~~ :f {
        spurt "{$sparky-project-dir}/sparrowfile", "# dummy file, generated by sparrowdo";
      }

      my $rand = ('a' .. 'z').pick(20).join('');

      my $id = "{$rand}{$*PID}";

      my $cache-dir = %*ENV<SPARKY_ROOT> ??  "{%*ENV<SPARKY_ROOT>}/.cache/$id/" !! "{%*ENV<HOME>}/.sparky/.cache/$id/";

      mkdir $cache-dir;

      if $verbose {
        say "[utils] copy .sparrowdo/* to cache-dir";
        shell("cp -rv .sparrowdo/* $cache-dir 2>&1");
        if $spf.IO ~~ :e {
          shell("cp -v $spf $cache-dir/sparrowfile");
        }
      } else {
        shell("cp -r .sparrowdo/* $cache-dir 2>&1");
        if $spf.IO ~~ :e {
          shell("cp $spf $cache-dir/sparrowfile");
        }
      }

      my %sparrowdo-config = %(
          repo => $repo,
          sync => $sync,
          verbose => $verbose,
          bootstrap => $bootstrap,
          no_index_update => $no_index_update
      );

      my @effective-tags;

      if $host-tags && $host-tags.isa(Str) {
        push @effective-tags, $host-tags;
      } elsif $host-tags.isa(Hash) {
        for $host-tags.keys -> $t {
          push @effective-tags, "{$t}={$host-tags{$t}}";
        }
      } elsif $host-tags.isa(List) {
        for $host-tags<> -> $t {
          push @effective-tags, "{$t}"
        }
      }

      push @effective-tags, $tags if $tags;

      say "effective tags: ", @effective-tags.perl if $verbose;

      if @effective-tags.elems {
        %sparrowdo-config<tags> = @effective-tags.join(",");
      }

      %sparrowdo-config<conf> = $path-to-config if $path-to-config.IO ~~ :e;

      my %trigger = %(
        cwd => $cache-dir,
      );

      if $h ~~ /^^ \s* 'docker:' (\S+)/ {
        %sparrowdo-config<docker> = "$0";  
        %sparrowdo-config<no_sudo> = True;  
        %trigger<description> = %host-tags<name> ?? "docker [{%host-tags<name>}]" !! ($desc || "docker [$0]")
      } elsif $h eq "localhost" {
        %trigger<description> =  %host-tags<name> ?? "localhost [{%host-tags<name>}]" !! ( $desc || "[localhost]");
        %sparrowdo-config<no_sudo> = $no_sudo;  
      } else {
        %sparrowdo-config<host> = $h;  
        %sparrowdo-config<ssh_port> = $ssh_port if $ssh_port;  
        %sparrowdo-config<ssh_user> = $ssh_user if $ssh_user;  
        %sparrowdo-config<ssh_private_key> = $ssh_private_key if $ssh_private_key;  
        %sparrowdo-config<no_sudo> = $no_sudo;  
        %trigger<description> =  %host-tags<name> ?? "host [{%host-tags<name>}]" !! ( $desc || "host [$h]")
      }

      %trigger<sparrowdo> = %sparrowdo-config;

      spurt "{$sparky-project-dir}/.triggers/$id", %trigger.perl;

      say "queue build for [$project] on [$h] id = $id";

      %trigger<job_id> = $id;

      @jobs.push(%(
        job-id => $id,
        project => $project,
        job-name => %host-tags<name> || "",
        host => $h,
        tags => %host-tags || %( name => %host-tags<name> || ""),
      )); 

    }

    if $watch {

       die "file $watch does not exist" unless $watch.IO ~~ :f;

       my $wid = "watcher_%.2d".sprintf((^$workers).pick(1).join("")+1);

       my $sparky-project-dir = %*ENV<SPARKY_ROOT> ??  "{%*ENV<SPARKY_ROOT>}/{$wid}" !! "{%*ENV<HOME>}/.sparky/projects/{$wid}";

       mkdir "{$sparky-project-dir}/.triggers" unless "{$sparky-project-dir}/.triggers".IO ~~ :d;

       unless "{$sparky-project-dir}/sparrowfile".IO ~~ :f {
        spurt "{$sparky-project-dir}/sparrowfile", "# dummy file, generated by sparrowdo";
       } 

       my $rand = ('a' .. 'z').pick(20).join('');

       my $id = "{$rand}{$*PID}";

       my $cache-dir = %*ENV<SPARKY_ROOT> ??  "{%*ENV<SPARKY_ROOT>}/.cache/$id/" !! "{%*ENV<HOME>}/.sparky/.cache/$id/";

       mkdir $cache-dir;

       my %trigger = %(
         cwd => $cache-dir,
         description => "[localhost]",
         sparrowdo => %(
           repo => $repo,
           sync => $sync,
           verbose => $verbose,
           bootstrap => $bootstrap,
           no_index_update => $no_index_update,
           no_sudo => $no_sudo
         )
       );

       copy $watch, "{$cache-dir}/sparrowfile";

       spurt "{$cache-dir}/config.pl6", %( jobs => @jobs ).perl;

       spurt "{$sparky-project-dir}/.triggers/$id", %trigger.perl;

       say "queue build for [$wid] on [localhost] id = $id";

    }

  } else {  

    prepare-ssh-host(
      $host,
      %( 
        ssh-user => $ssh_user,
        ssh-port => $ssh_port,
        ssh-private-key => $ssh_private_key,
        verbose => $verbose,
        sync    => $sync,
        prefix  => $prefix 

      )
    );

    if $bootstrap {
      bootstrap-ssh-host(
        $host,
        %( 
          verbose   => $verbose, 
          ssh-user  => $ssh_user, 
          ssh-port  => $ssh_port,
          ssh-private-key => $ssh_private_key,
          prefix    => $prefix 
        )    
      );
      if ! $sparrowfile && ! $spf.IO.e  { 
        # don't try to run sparrowfile if in bootstrap mode
        # and if sparrowfile is not passed and 
        # default sparrowfile does not exist
        say "Congratulations!\nYour system is ready to be configured automatically using Sparrowdo!";
        exit 0;
      }
    }

    die "sparrowfile $spf does not exit" unless $spf.IO ~~ :e;

    run-tasks-ssh-host(
      $host,$spf,
      %( 
        ssh-user => $ssh_user,
        ssh-port => $ssh_port,
        ssh-private-key => $ssh_private_key,
        verbose  => $verbose, 
        prefix   => $prefix 
      )
    );
  }

}

